PS C:\Users\flori> cd D:\uni2.0\sem2\Haskell\Laboratoare\laborator4
PS D:\uni2.0\sem2\Haskell\Laboratoare\laborator4> ghc
ghc-9.2.5.exe: no input files
Usage: For basic information, try the `--help' option.
PS D:\uni2.0\sem2\Haskell\Laboratoare\laborator4> ghci
GHCi, version 9.2.5: https://www.haskell.org/ghc/  :? for help
ghci> :load functii.hs

<no location info>: error: can't find file: functii.hs
Failed, no modules loaded.
ghci> :load functii.hs
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> process (/2) 12312
6156.0
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )

functii.hs:30:38: error:
    Ambiguous occurrence `sum'
    It could refer to
       either `Prelude.sum',
              imported from `Prelude' at functii.hs:1:1
              (and originally defined in `Data.Foldable')
           or `Main.sum', defined at functii.hs:29:1
   |
30 | sum f x1 x2 | x1 < x2       = f x1 + sum f (x1+1) x2
   |                                      ^^^
Failed, no modules loaded.
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> suma (+1) 3 6
15
ghci> suma (+1) 3 6
15
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> suma (+1) 3 6
22
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )

functii.hs:41:19: error:
    * Couldn't match expected type `Int -> Int' with actual type `Int'
    * Possible cause: `f' is applied to too many arguments
      In the expression: f g
      In an equation for `composition': composition f g = f g
   |
41 | composition f g = f g
   |                   ^^^

functii.hs:41:21: error:
    * Couldn't match expected type `Int' with actual type `Int -> Int'
    * Probable cause: `g' is applied to too few arguments
      In the first argument of `f', namely `g'
      In the expression: f g
      In an equation for `composition': composition f g = f g
   |
41 | composition f g = f g
   |                     ^
Failed, no modules loaded.
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> composition (+2) (*2) 20
42
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )

functii.hs:47:40: error:
    * Couldn't match expected type `Int' with actual type `Int -> Int'
    * Probable cause: `compositionList' is applied to too few arguments
      In the first argument of `hd', namely `(compositionList tl)'
      In the expression: hd (compositionList tl)
      In the expression: \ x -> hd (compositionList tl)
   |
47 | compositionList (hd : tl) = \ x -> hd (compositionList tl)
   |                                        ^^^^^^^^^^^^^^^^^^
Failed, no modules loaded.
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> compositionList (+2) (*3) (-10) (sin) 0

<interactive>:16:1: error:
    * Couldn't match expected type `t0 -> (a0 -> a0) -> t1 -> t'
                  with actual type `Int'
    * The function `compositionList'
      is applied to five value arguments,
        but its type `[Int -> Int] -> Int -> Int' has only two
      In the expression: compositionList (+ 2) (* 3) (- 10) (sin) 0
      In an equation for `it':
          it = compositionList (+ 2) (* 3) (- 10) (sin) 0
    * Relevant bindings include it :: t (bound at <interactive>:16:1)

<interactive>:16:18: error:
    * Couldn't match expected type: [Int -> Int]
                  with actual type: a1 -> a1
    * In the first argument of `compositionList', namely `(+ 2)'
      In the expression: compositionList (+ 2) (* 3) (- 10) (sin) 0
      In an equation for `it':
          it = compositionList (+ 2) (* 3) (- 10) (sin) 0

<interactive>:16:23: error:
    * Couldn't match expected type `Int' with actual type `a2 -> a2'
    * In the second argument of `compositionList', namely `(* 3)'
      In the expression: compositionList (+ 2) (* 3) (- 10) (sin) 0
      In an equation for `it':
          it = compositionList (+ 2) (* 3) (- 10) (sin) 0
ghci> compositionList (+2) (*3) (-10) 0      

<interactive>:17:1: error:
    * Couldn't match expected type `t0 -> t1 -> t'
                  with actual type `Int'
    * The function `compositionList'
      is applied to four value arguments,
        but its type `[Int -> Int] -> Int -> Int' has only two
      In the expression: compositionList (+ 2) (* 3) (- 10) 0
      In an equation for `it': it = compositionList (+ 2) (* 3) (- 10) 0
    * Relevant bindings include it :: t (bound at <interactive>:17:1)

<interactive>:17:18: error:
    * Couldn't match expected type: [Int -> Int]
                  with actual type: a0 -> a0
    * In the first argument of `compositionList', namely `(+ 2)'
      In the expression: compositionList (+ 2) (* 3) (- 10) 0
      In an equation for `it': it = compositionList (+ 2) (* 3) (- 10) 0

<interactive>:17:23: error:
    * Couldn't match expected type `Int' with actual type `a1 -> a1'
    * In the second argument of `compositionList', namely `(* 3)'
      In the expression: compositionList (+ 2) (* 3) (- 10) 0
      In an equation for `it': it = compositionList (+ 2) (* 3) (- 10) 0
ghci> compositionList (+2) (*3) (+(-10)) 0  

<interactive>:18:1: error:
    * Couldn't match expected type `(a2 -> a2) -> t0 -> t'
                  with actual type `Int'
    * The function `compositionList'
      is applied to four value arguments,
        but its type `[Int -> Int] -> Int -> Int' has only two
      In the expression: compositionList (+ 2) (* 3) (+ (- 10)) 0
      In an equation for `it':
          it = compositionList (+ 2) (* 3) (+ (- 10)) 0
    * Relevant bindings include it :: t (bound at <interactive>:18:1)

<interactive>:18:18: error:
    * Couldn't match expected type: [Int -> Int]
                  with actual type: a0 -> a0
    * In the first argument of `compositionList', namely `(+ 2)'
      In the expression: compositionList (+ 2) (* 3) (+ (- 10)) 0
      In an equation for `it':
          it = compositionList (+ 2) (* 3) (+ (- 10)) 0

<interactive>:18:23: error:
    * Couldn't match expected type `Int' with actual type `a1 -> a1'
    * In the second argument of `compositionList', namely `(* 3)'
      In the expression: compositionList (+ 2) (* 3) (+ (- 10)) 0
      In an equation for `it':
          it = compositionList (+ 2) (* 3) (+ (- 10)) 0
ghci> compositionList (+2) (*3) 3         

<interactive>:19:1: error:
    * Couldn't match expected type `t0 -> t' with actual type `Int'
    * The function `compositionList'
      is applied to three value arguments,
        but its type `[Int -> Int] -> Int -> Int' has only two
      In the expression: compositionList (+ 2) (* 3) 3
      In an equation for `it': it = compositionList (+ 2) (* 3) 3
    * Relevant bindings include it :: t (bound at <interactive>:19:1)

<interactive>:19:18: error:
    * Couldn't match expected type: [Int -> Int]
                  with actual type: a0 -> a0
    * In the first argument of `compositionList', namely `(+ 2)'
      In the expression: compositionList (+ 2) (* 3) 3
      In an equation for `it': it = compositionList (+ 2) (* 3) 3

<interactive>:19:23: error:
    * Couldn't match expected type `Int' with actual type `a1 -> a1'
    * In the second argument of `compositionList', namely `(* 3)'
      In the expression: compositionList (+ 2) (* 3) 3
      In an equation for `it': it = compositionList (+ 2) (* 3) 3
ghci> compositionList [(+2) (*3)] 3

<interactive>:20:19: error:
    * No instance for (Num (Int -> Int)) arising from a use of `+'
        (maybe you haven't applied a function to enough arguments?)
    * In the expression: (+)
      In the expression: (+ 2) (* 3)
      In the first argument of `compositionList', namely `[(+ 2) (* 3)]'
ghci> compositionList [(+2), (*3)] 3
*** Exception: functii.hs:47:1-62: Non-exhaustive patterns in function compositionList        

ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> compositionList [(+2), (*3)] 3
*** Exception: functii.hs:47:1-62: Non-exhaustive patterns in function compositionList        

ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> compositionList [(+2), (*3)] 3
11
ghci> compositionList [(+2), (*3), sin] 1

<interactive>:26:30: error:
    * No instance for (Floating Int) arising from a use of `sin'
    * In the expression: sin
      In the first argument of `compositionList', namely
        `[(+ 2), (* 3), sin]'
      In the expression: compositionList [(+ 2), (* 3), sin] 1
ghci> compositionList [(+2), (*3), (sin)] 1

<interactive>:27:31: error:
    * No instance for (Floating Int) arising from a use of `sin'
    * In the expression: sin
      In the first argument of `compositionList', namely
        `[(+ 2), (* 3), (sin)]'
      In the expression: compositionList [(+ 2), (* 3), (sin)] 1
ghci> compositionList [(+2), (*3), (Sin)] 1

<interactive>:28:31: error:
    * Data constructor not in scope: Sin :: Int -> Int
    * Perhaps you meant one of these:
        variable `min' (imported from Prelude),
        variable `sin' (imported from Prelude)
ghci> compositionList [(+2), (*3), (sin)] 1

<interactive>:29:31: error:
    * No instance for (Floating Int) arising from a use of `sin'
    * In the expression: sin
      In the first argument of `compositionList', namely
        `[(+ 2), (* 3), (sin)]'
      In the expression: compositionList [(+ 2), (* 3), (sin)] 1
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> compositionList [(+2), (*3), (sin)] 1
4.524413
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> reduce (+) 0 [1,2,3,4,5,6]

<interactive>:33:8: error:
    * Couldn't match expected type `Int'
                  with actual type `a0 -> a0 -> a0'
    * Probable cause: `(+)' is applied to too few arguments
      In the first argument of `reduce', namely `(+)'
      In the expression: reduce (+) 0 [1, 2, 3, 4, ....]
      In an equation for `it': it = reduce (+) 0 [1, 2, 3, ....]
ghci> reduce (+1) 0 [1,2,3,4,5,6]

<interactive>:34:9: error:
    * Couldn't match expected type `Int' with actual type `a0 -> a0'
    * In the first argument of `reduce', namely `(+ 1)'
      In the expression: reduce (+ 1) 0 [1, 2, 3, 4, ....]
      In an equation for `it': it = reduce (+ 1) 0 [1, 2, 3, ....]
ghci> reduce (+1) 0 [1,2,3,4,5,6]

<interactive>:35:9: error:
    * Couldn't match expected type `Int' with actual type `a0 -> a0'
    * In the first argument of `reduce', namely `(+ 1)'
      In the expression: reduce (+ 1) 0 [1, 2, 3, 4, ....]
      In an equation for `it': it = reduce (+ 1) 0 [1, 2, 3, ....]
ghci> reduce  0 (+) [1,2,3,4,5,6]
21
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )

functii.hs:60:25: error:
    Ambiguous occurrence `map'
    It could refer to
       either `Prelude.map',
              imported from `Prelude' at functii.hs:1:1
              (and originally defined in `GHC.Base')
           or `Main.map', defined at functii.hs:59:1
   |
60 | map f (hd:tl) = (f hd : map tl)
   |                         ^^^
Failed, no modules loaded.
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )

functii.hs:60:25: error:
    Ambiguous occurrence `map'
    It could refer to
       either `Prelude.map',
              imported from `Prelude' at functii.hs:1:1
              (and originally defined in `GHC.Base')
           or `Main.map', defined at functii.hs:59:1
   |
60 | map f (hd:tl) = (f hd : map f tl)
   |                         ^^^
Failed, no modules loaded.
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> :r
Ok, one module loaded.
ghci> mapp (+) [1,2,3,4,5,6,6,7,8,9]  

<interactive>:41:6: error:
    * Couldn't match type `Int -> Int' with `Int'
      Expected: Int -> Int
        Actual: Int -> Int -> Int
    * Probable cause: `(+)' is applied to too few arguments
      In the first argument of `mapp', namely `(+)'
      In the expression: mapp (+) [1, 2, 3, 4, ....]
      In an equation for `it': it = mapp (+) [1, 2, 3, ....]
ghci> mapp (+1) [1,2,3,4,5,6,6,7,8,9]        
[2,3,4,5,6,7,7,8,9,10]
ghci> mapp (+1) [1,2,3,4,5,6,6,7,8,9]
[2,3,4,5,6,7,7,8,9,10]
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )

functii.hs:67:57: error:
    Ambiguous occurrence `filter'
    It could refer to
       either `Prelude.filter',
              imported from `Prelude' at functii.hs:1:1
              (and originally defined in `GHC.List')
           or `Main.filter', defined at functii.hs:66:1
   |
67 | filter predicate (hd:tl) | predicate hd == True = (hd : filter predicate tl)
   |                                                         ^^^^^^

functii.hs:68:51: error:
    Ambiguous occurrence `filter'
    It could refer to
       either `Prelude.filter',
              imported from `Prelude' at functii.hs:1:1
              (and originally defined in `GHC.List')
           or `Main.filter', defined at functii.hs:66:1
   |
68 | filter predicate (hd:tl)                        = filter predicate tl
   |                                                   ^^^^^^
Failed, no modules loaded.
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )

functii.hs:67:58: error:
    Ambiguous occurrence `filter'
    It could refer to
       either `Prelude.filter',
              imported from `Prelude' at functii.hs:1:1
              (and originally defined in `GHC.List')
           or `Main.filter', defined at functii.hs:66:1
   |
67 | filter predicate (hd:tl) | predicate hd == True = (hd : (filter predicate tl))
   |                                                          ^^^^^^

functii.hs:68:51: error:
    Ambiguous occurrence `filter'
    It could refer to
       either `Prelude.filter',
              imported from `Prelude' at functii.hs:1:1
              (and originally defined in `GHC.List')
           or `Main.filter', defined at functii.hs:66:1
   |
68 | filter predicate (hd:tl)                        = filter predicate tl
   |                                                   ^^^^^^
Failed, no modules loaded.
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> filterr (>10) [323, 3, 4, 12, 42]
[323,12,42]
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )

functii.hs:76:12: error:
    View pattern in expression context: Int -> _
   |
76 | myFoldr = (Int -> Int -> Int) -> Int -> [Int] -> Int
   |            ^^^^^^^^^^^^^^^^^

functii.hs:76:19: error:
    View pattern in expression context: Int -> Int
   |
76 | myFoldr = (Int -> Int -> Int) -> Int -> [Int] -> Int
   |                   ^^^^^^^^^^

functii.hs:76:31: error: parse error on input `->'
   |
76 | myFoldr = (Int -> Int -> Int) -> Int -> [Int] -> Int
   |                               ^^
Failed, no modules loaded.
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )

functii.hs:76:12: error:
    View pattern in expression context: Int -> _
   |
76 | myFoldr = (Int -> Int -> Int) -> Int -> [Int] -> Int
   |            ^^^^^^^^^^^^^^^^^

functii.hs:76:19: error:
    View pattern in expression context: Int -> Int
   |
76 | myFoldr = (Int -> Int -> Int) -> Int -> [Int] -> Int
   |                   ^^^^^^^^^^

functii.hs:76:31: error: parse error on input `->'
   |
76 | myFoldr = (Int -> Int -> Int) -> Int -> [Int] -> Int
   |                               ^^
Failed, no modules loaded.
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> myFoldr (+) 5 [1,2,3,4]
15
ghci> myFoldr (/) 2 [8,12,24,4]

<interactive>:52:9: error:
    * No instance for (Fractional Int) arising from a use of `/'
    * In the first argument of `myFoldr', namely `(/)'
      In the expression: myFoldr (/) 2 [8, 12, 24, 4]
      In an equation for `it': it = myFoldr (/) 2 [8, 12, 24, ....]
ghci> myFoldr (/) 2 [8,12,24,4]

<interactive>:53:9: error:
    * No instance for (Fractional Int) arising from a use of `/'
    * In the first argument of `myFoldr', namely `(/)'
      In the expression: myFoldr (/) 2 [8, 12, 24, 4]
      In an equation for `it': it = myFoldr (/) 2 [8, 12, 24, ....]
ghci> myFoldr (/) 2 [8,12,24,4]

<interactive>:54:9: error:
    * No instance for (Fractional Int) arising from a use of `/'
    * In the first argument of `myFoldr', namely `(/)'
      In the expression: myFoldr (/) 2 [8, 12, 24, 4]
      In an equation for `it': it = myFoldr (/) 2 [8, 12, 24, ....]
ghci> myFoldr (/) 2 [8,12,24,4]

<interactive>:55:9: error:
    * No instance for (Fractional Int) arising from a use of `/'
    * In the first argument of `myFoldr', namely `(/)'
      In the expression: myFoldr (/) 2 [8, 12, 24, 4]
      In an equation for `it': it = myFoldr (/) 2 [8, 12, 24, ....]
ghci> myFoldr (+) 5 [1,2,3,4]  
15
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> myFoldr (+) 5 [1,2,3,4]
15
ghci> myFoldr (/) 2 [8,12,24,4]
2.1701388888888888e-4
ghci> myFoldr (/) 2 []         
2.0
ghci> myFoldr (/) 2 [8,12,24,4]
2.1701388888888888e-4
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> myFoldr (/) 2 [8,12,24,4]
8.0
ghci> :r
[1 of 1] Compiling Main             ( functii.hs, interpreted )
Ok, one module loaded.
ghci> myFoldr (\x y -> y / x) 2 [8,12,24,4]
8.0